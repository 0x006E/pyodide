diff -ur matplotlib-2.2.2/lib/matplotlib/axes/_axes.py matplotlib-2.2.2/lib/matplotlib/axes/_axes.py
--- a/lib/matplotlib/axes/_axes.py	2018-03-17 14:03:23.000000000 -0400
+++ b/lib/matplotlib/axes/_axes.py	2018-05-17 09:42:02.998583676 -0400
@@ -37,7 +37,7 @@
 import matplotlib.text as mtext
 import matplotlib.ticker as mticker
 import matplotlib.transforms as mtransforms
-import matplotlib.tri as mtri
+# import matplotlib.tri as mtri
 from matplotlib.cbook import (
     _backports, mplDeprecation, warn_deprecated,
     STEP_LOOKUP_MAP, iterable, safe_first_element)
@@ -8017,18 +8017,18 @@

         return artists

-    def tricontour(self, *args, **kwargs):
-        return mtri.tricontour(self, *args, **kwargs)
-    tricontour.__doc__ = mtri.tricontour.__doc__
-
-    def tricontourf(self, *args, **kwargs):
-        return mtri.tricontourf(self, *args, **kwargs)
-    tricontourf.__doc__ = mtri.tricontour.__doc__
-
-    def tripcolor(self, *args, **kwargs):
-        return mtri.tripcolor(self, *args, **kwargs)
-    tripcolor.__doc__ = mtri.tripcolor.__doc__
-
-    def triplot(self, *args, **kwargs):
-        return mtri.triplot(self, *args, **kwargs)
-    triplot.__doc__ = mtri.triplot.__doc__
+    # def tricontour(self, *args, **kwargs):
+    #     return mtri.tricontour(self, *args, **kwargs)
+    # tricontour.__doc__ = mtri.tricontour.__doc__
+
+    # def tricontourf(self, *args, **kwargs):
+    #     return mtri.tricontourf(self, *args, **kwargs)
+    # tricontourf.__doc__ = mtri.tricontour.__doc__
+
+    # def tripcolor(self, *args, **kwargs):
+    #     return mtri.tripcolor(self, *args, **kwargs)
+    # tripcolor.__doc__ = mtri.tripcolor.__doc__
+
+    # def triplot(self, *args, **kwargs):
+    #     return mtri.triplot(self, *args, **kwargs)
+    # triplot.__doc__ = mtri.triplot.__doc__
diff -ur matplotlib-2.2.2/lib/matplotlib/pyplot.py host/matplotlib-2.2.2/lib/matplotlib/pyplot.py
--- matplotlib-2.2.2/lib/matplotlib/pyplot.py	2018-03-17 14:03:23.000000000 -0400
+++ host/matplotlib-2.2.2/lib/matplotlib/pyplot.py	2018-05-17 09:45:27.193765098 -0400
@@ -3630,85 +3630,85 @@
     sci(ret.lines)
     return ret

-# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
-@_autogen_docstring(Axes.tricontour)
-def tricontour(*args, **kwargs):
-    ax = gca()
-    # Deprecated: allow callers to override the hold state
-    # by passing hold=True|False
-    washold = ax._hold
-    hold = kwargs.pop('hold', None)
-    if hold is not None:
-        ax._hold = hold
-        from matplotlib.cbook import mplDeprecation
-        warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
-                      mplDeprecation)
-    try:
-        ret = ax.tricontour(*args, **kwargs)
-    finally:
-        ax._hold = washold
-    if ret._A is not None: sci(ret)
-    return ret
-
-# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
-@_autogen_docstring(Axes.tricontourf)
-def tricontourf(*args, **kwargs):
-    ax = gca()
-    # Deprecated: allow callers to override the hold state
-    # by passing hold=True|False
-    washold = ax._hold
-    hold = kwargs.pop('hold', None)
-    if hold is not None:
-        ax._hold = hold
-        from matplotlib.cbook import mplDeprecation
-        warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
-                      mplDeprecation)
-    try:
-        ret = ax.tricontourf(*args, **kwargs)
-    finally:
-        ax._hold = washold
-    if ret._A is not None: sci(ret)
-    return ret
+# # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
+# @_autogen_docstring(Axes.tricontour)
+# def tricontour(*args, **kwargs):
+#     ax = gca()
+#     # Deprecated: allow callers to override the hold state
+#     # by passing hold=True|False
+#     washold = ax._hold
+#     hold = kwargs.pop('hold', None)
+#     if hold is not None:
+#         ax._hold = hold
+#         from matplotlib.cbook import mplDeprecation
+#         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
+#                       mplDeprecation)
+#     try:
+#         ret = ax.tricontour(*args, **kwargs)
+#     finally:
+#         ax._hold = washold
+#     if ret._A is not None: sci(ret)
+#     return ret
+
+# # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
+# @_autogen_docstring(Axes.tricontourf)
+# def tricontourf(*args, **kwargs):
+#     ax = gca()
+#     # Deprecated: allow callers to override the hold state
+#     # by passing hold=True|False
+#     washold = ax._hold
+#     hold = kwargs.pop('hold', None)
+#     if hold is not None:
+#         ax._hold = hold
+#         from matplotlib.cbook import mplDeprecation
+#         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
+#                       mplDeprecation)
+#     try:
+#         ret = ax.tricontourf(*args, **kwargs)
+#     finally:
+#         ax._hold = washold
+#     if ret._A is not None: sci(ret)
+#     return ret
+
+# # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
+# @_autogen_docstring(Axes.tripcolor)
+# def tripcolor(*args, **kwargs):
+#     ax = gca()
+#     # Deprecated: allow callers to override the hold state
+#     # by passing hold=True|False
+#     washold = ax._hold
+#     hold = kwargs.pop('hold', None)
+#     if hold is not None:
+#         ax._hold = hold
+#         from matplotlib.cbook import mplDeprecation
+#         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
+#                       mplDeprecation)
+#     try:
+#         ret = ax.tripcolor(*args, **kwargs)
+#     finally:
+#         ax._hold = washold
+#     sci(ret)
+#     return ret
+
+# # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
+# @_autogen_docstring(Axes.triplot)
+# def triplot(*args, **kwargs):
+#     ax = gca()
+#     # Deprecated: allow callers to override the hold state
+#     # by passing hold=True|False
+#     washold = ax._hold
+#     hold = kwargs.pop('hold', None)
+#     if hold is not None:
+#         ax._hold = hold
+#         from matplotlib.cbook import mplDeprecation
+#         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
+#                       mplDeprecation)
+#     try:
+#         ret = ax.triplot(*args, **kwargs)
+#     finally:
+#         ax._hold = washold

-# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
-@_autogen_docstring(Axes.tripcolor)
-def tripcolor(*args, **kwargs):
-    ax = gca()
-    # Deprecated: allow callers to override the hold state
-    # by passing hold=True|False
-    washold = ax._hold
-    hold = kwargs.pop('hold', None)
-    if hold is not None:
-        ax._hold = hold
-        from matplotlib.cbook import mplDeprecation
-        warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
-                      mplDeprecation)
-    try:
-        ret = ax.tripcolor(*args, **kwargs)
-    finally:
-        ax._hold = washold
-    sci(ret)
-    return ret
-
-# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
-@_autogen_docstring(Axes.triplot)
-def triplot(*args, **kwargs):
-    ax = gca()
-    # Deprecated: allow callers to override the hold state
-    # by passing hold=True|False
-    washold = ax._hold
-    hold = kwargs.pop('hold', None)
-    if hold is not None:
-        ax._hold = hold
-        from matplotlib.cbook import mplDeprecation
-        warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
-                      mplDeprecation)
-    try:
-        ret = ax.triplot(*args, **kwargs)
-    finally:
-        ax._hold = washold
-
-    return ret
+#     return ret

 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
 @_autogen_docstring(Axes.violinplot)