diff --git a/src/library.js b/src/library.js
index 5fc87ab16..82ebcfd61 100644
--- a/emsdk/emscripten/tag-1.38.4/src/library.js
+++ b/emsdk/emscripten/tag-1.38.4/src/library.js
@@ -1755,9 +1755,14 @@ LibraryManager.library = {
       return handle;
     }

+    var lib_module;
     if (filename === '__self__') {
       var handle = -1;
-      var lib_module = Module;
+      lib_module = Module;
+    } else {
+      if (Module['preloadedWasm'] !== undefined &&
+          Module['preloadedWasm'][filename] !== undefined) {
+        lib_module = Module['preloadedWasm'][filename];
       } else {
         var target = FS.findObject(filename);
         if (!target || target.isFolder || target.isDevice) {
@@ -1766,7 +1771,6 @@ LibraryManager.library = {
         }
         FS.forceLoadFile(target);

-      var lib_module;
         try {
 #if WASM
           // the shared library is a shared wasm library (see tools/shared.py WebAssembly.make_shared_library)
@@ -1789,6 +1793,7 @@ LibraryManager.library = {
           DLFCN.errorMsg = 'Could not evaluate dynamic lib: ' + filename + '\n' + e;
           return 0;
         }
+      }

       // Not all browsers support Object.keys().
       var handle = 1;
@@ -4792,4 +4797,3 @@ function autoAddDeps(object, name) {
     }
   }
 }
-
diff --git emsdk/emscripten/tag-1.38.4/src/library_browser.js emsdk/emscripten/tag-1.38.4/src/library_browser.js
index 36738391e..e2ac2763e 100644
--- a/emsdk/emscripten/tag-1.38.4/src/library_browser.js
+++ b/emsdk/emscripten/tag-1.38.4/src/library_browser.js
@@ -225,6 +225,35 @@ var LibraryBrowser = {
       };
       Module['preloadPlugins'].push(audioPlugin);

+#if WASM
+#if MAIN_MODULE
+      var wasmPlugin = {};
+      wasmPlugin['asyncWasmLoadPromise'] = new Promise(
+        function(resolve, reject) { return resolve(); });
+      wasmPlugin['canHandle'] = function(name) {
+        return !Module.noWasmDecoding && (name.endsWith('.so') || name.endsWith('.wasm'));
+      };
+      wasmPlugin['handle'] = function(byteArray, name, onload, onerror) {
+        // loadWebAssemblyModule can not load modules out-of-order, so rather
+        // than just running the promises in parallel, this makes a chain of
+        // promises to run in series.
+        this['asyncWasmLoadPromise'] = this['asyncWasmLoadPromise'].then(
+          function() {
+            return loadWebAssemblyModule(byteArray, true);
+          }).then(
+            function(module) {
+              Module['preloadedWasm'][name] = module;
+              onload();
+            },
+            function(err) {
+              console.warn("Couldn't instantiate wasm: " + name + " '" + err + "'");
+              onerror();
+            });
+      };
+      Module['preloadPlugins'].push(wasmPlugin);
+#endif // MAIN_MODULE
+#endif // WASM
+
       // Canvas event setup

       function pointerLockChange() {
@@ -1488,4 +1517,3 @@ function slowLog(label, text) {
 }

 */
-
diff --git emsdk/emscripten/tag-1.38.4/src/preamble.js emsdk/emscripten/tag-1.38.4/src/preamble.js
index a757e8300..c7b1f596f 100644
--- a/emsdk/emscripten/tag-1.38.4/src/preamble.js
+++ b/emsdk/emscripten/tag-1.38.4/src/preamble.js
@@ -1822,6 +1822,11 @@ function removeRunDependency(id) {

 Module["preloadedImages"] = {}; // maps url to image data
 Module["preloadedAudios"] = {}; // maps url to audio data
+#if WASM
+#if MAIN_MODULE
+Module["preloadedWasm"] = {}; // maps url to wasm instance exports
+#endif // MAIN_MODULE
+#endif // WASM

 #if PGO
 var PGOMonitor = {
diff --git emsdk/emscripten/tag-1.38.4/src/support.js emsdk/emscripten/tag-1.38.4/src/support.js
index f6c9842ff..99367db70 100644
--- a/emsdk/emscripten/tag-1.38.4/src/support.js
+++ b/emsdk/emscripten/tag-1.38.4/src/support.js
@@ -86,7 +86,7 @@ function loadDynamicLibrary(lib) {

 #if WASM
 // Loads a side module from binary data
-function loadWebAssemblyModule(binary) {
+function loadWebAssemblyModule(binary, loadAsync) {
   var int32View = new Uint32Array(new Uint8Array(binary.subarray(0, 24)).buffer);
   assert(int32View[0] == 0x6d736100, 'need to see wasm magic number'); // \0wasm
   // we should see the dylink section right after the magic number and wasm version
@@ -166,8 +166,9 @@ function loadWebAssemblyModule(binary) {
     oldTable.push(table.get(i));
   }
 #endif
-  // create a module from the instance
-  var instance = new WebAssembly.Instance(new WebAssembly.Module(binary), info);
+
+  function postInstantiation(instance) {
+    var exports = {};
 #if ASSERTIONS
     // the table should be unchanged
     assert(table === originalTable);
@@ -184,7 +185,6 @@ function loadWebAssemblyModule(binary) {
       assert(table.get(oldTableSize + i) !== undefined, 'table entry was not filled in');
     }
 #endif
-  var exports = {};
     for (var e in instance.exports) {
       var value = instance.exports[e];
       if (typeof value === 'object') {
@@ -219,6 +219,18 @@ function loadWebAssemblyModule(binary) {
     }
     return exports;
   }
+
+  if (loadAsync) {
+    return WebAssembly.instantiate(binary, info).then(function(result) {
+      return postInstantiation(result.instance);
+    });
+  } else {
+    var instance = new WebAssembly.Instance(new WebAssembly.Module(binary), info);
+    return postInstantiation(instance);
+  }
+}
+Module['loadWebAssemblyModule'] = loadWebAssemblyModule;
+
 #endif // WASM
 #endif // RELOCATABLE

diff --git emsdk/emscripten/tag-1.38.4/tests/test_browser.py emsdk/emscripten/tag-1.38.4/tests/test_browser.py
index d5f49d04e..c85367f72 100644
--- a/emsdk/emscripten/tag-1.38.4/tests/test_browser.py
+++ b/emsdk/emscripten/tag-1.38.4/tests/test_browser.py
@@ -2273,6 +2273,43 @@ void *getBindBuffer() {
     Popen([PYTHON, EMCC, path_from_root('tests', 'browser_module.cpp'), '-o', 'module.js', '-O2', '-s', 'SIDE_MODULE=1', '-s', 'DLOPEN_SUPPORT=1', '-s', 'EXPORTED_FUNCTIONS=["_one", "_two"]']).communicate()
     self.btest('browser_main.cpp', args=['-O2', '-s', 'MAIN_MODULE=1', '-s', 'DLOPEN_SUPPORT=1'], expected='8')

+  def test_preload_module(self):
+    expected = 'hello from main\nhello from library'
+    open('library.c', 'w').write(r'''
+      #include <stdio.h>
+      int library_func() {
+        return 42;
+      }
+    ''')
+    run_process([PYTHON, EMCC, 'library.c', '-s', 'SIDE_MODULE=1', '-O2', '-o', 'library.wasm', '-s', 'WASM=1'])
+    main = r'''
+      #include <dlfcn.h>
+      #include <stdio.h>
+      #include <emscripten.h>
+      int main() {
+        EM_ASM(
+          console.log(Object.keys(Module['preloadedWasm']));
+          if (Module['preloadedWasm']['/library.wasm'] === undefined) {
+            throw Error("Side module not preloaded");
+          }
+        );
+        void *lib_handle = dlopen("/library.wasm", 0);
+        if (!lib_handle) {
+          return 1;
+        }
+        typedef int (*voidfunc)();
+        voidfunc x = (voidfunc)dlsym(lib_handle, "library_func");
+        if (!x) return 1;
+        if (x() != 42) return 1;
+        REPORT_RESULT(0);
+        return 0;
+      }
+    '''
+    self.btest(
+      main,
+      args=['-s', 'MAIN_MODULE=1', '--preload-file', '.@/', '-O2', '-s', 'WASM=1', '--use-preload-plugins'],
+      expected='0')
+
   def test_mmap_file(self):
     open(self.in_dir('data.dat'), 'w').write('data from the file ' + ('.' * 9000))
     for extra_args in [[], ['--no-heap-copy']]:
